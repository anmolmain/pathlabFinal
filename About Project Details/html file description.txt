base.html
Sure, here's a brief intro to the provided HTML template:

This is an HTML template with embedded Django template language. It's designed for a Laboratory Management System and includes:

- **Static Files**: Loads static files using `{% load static %}` to use static assets like CSS and JavaScript.

- **Bootstrap Styling**: Utilizes Bootstrap for styling, with a navigation bar and responsive design.

- **Navigation Bar**: Conditional navigation links based on user authentication status. Links include "Login", "Register", "Home", "About Us", "Book appointment", "Status", "My tests", and "Logout".

- **Welcome Message**: Displays a welcome message with the user's first name if authenticated.

- **Content Block**: A Django template block (`{% block content %}`) for child templates to inject their content.

- **JavaScript**: Includes Bootstrap JavaScript from a CDN for interactive features.


home.html
This Django template extends a base template (`base.html`) and includes:

- **External Scripts**: 
  - jQuery for JavaScript functionalities.
  - AOS (Animate On Scroll) library for scroll animations.
  
- **Static Files**: 
  - Loads static files using `{% load static %}`.

- **Content Block**: 
  - Utilizes a Django template block (`{% block content %}`) to inject its content into the `base.html`.

- **Sections**:

  - **Introduction**: Describes the laboratory's offerings and invites users to explore further.
  
  - **Equipment**: Displays a list of equipment dynamically using a loop over the `equipments` context variable.
  
  - **Services**: Lists services offered by the lab with fixed images and descriptions.
  
  - **Contact**: Provides contact information for the laboratory, including an image, phone number, email, and address.

- **Styles**: 
  - Custom CSS styles for various sections like `#introduction`, `#equipment`, `#services`, `#contact`, etc.

- **JavaScript**: 
  - Initializes AOS for animations using `AOS.init()`.

Overall, this template provides an overview of the laboratory's capabilities, showcasing its equipment, services, and contact details.




about.html
This Django template extends a base template (`base.html`) and contains:

- **External Scripts**:
  - jQuery for JavaScript functionalities.
  - AOS (Animate On Scroll) library for scroll animations.

- **Static Files**:
  - Loads static files using `{% load static %}`.

- **Content Block**:
  - Utilizes a Django template block (`{% block content %}`) to inject its content into the `base.html`.

- **Sections**:

  - **Introduction (Banner)**: A simple banner with a green background and a message about the lab's diagnostic services.
  
  - **About Section**: Provides information about "THE Pathological Lab", describing its commitment to high-quality diagnostic services and range of tests offered.
  
  - **Team Section**: Placeholder for team members' information, to be dynamically loaded.
  
  - **Services Section**: Placeholder for services offered by the lab, to be dynamically loaded.
  
  - **Contact Section**: Provides contact information for the lab, including an image, phone number, email, and address.

- **Styles**: 
  - Custom CSS styles for various sections like `#banner`, `#about`, `#services`, `#team`, `#contact`, etc.

- **JavaScript**: 
  - Initializes AOS for animations using `AOS.init()`.
  - Dynamically loads team members and services using dummy data and appends them to their respective sections.

Overall, this template provides an overview of "THE Pathological Lab", showcasing its team, services, and contact details, with animations provided by AOS.




alltest.html
This Django template extends a base template (`base.html`) and contains:

- **Static Files**:
  - Loads static files using `{% load static %}`.

- **Content Block**:
  - Utilizes a Django template block (`{% block content %}`) to inject its content into the `base.html`.

- **Table Displaying Test Appointments**:
  - A container (`<div>`) with a title "All Tests".
  - A table displaying test appointments with columns for "Sample Collection Date", "Test ID", "Status", and "Copy Test ID".
  
  - **Dynamic Data**:
    - Loops through each `appointment` in the `appointments` context variable.
    - Displays the sample collection date, test ID, and status for each appointment.
    - Provides a button to copy the test ID to the clipboard.

  - **Empty State**:
    - If there are no appointments (`appointments` list is empty), it displays a row with a message "No tests found."

- **JavaScript**:
  - Listens for the DOM content to be loaded.
  - Finds all elements with the class `copy-btn` (the copy buttons).
  - Attaches a click event listener to each copy button.
  - When clicked, the button copies the `data-clipboard-text` attribute (which holds the test ID) to the clipboard using the `navigator.clipboard.writeText()` method.
  - Displays an alert message when the test ID is successfully copied to the clipboard or logs an error if copying fails.

Overall, this template displays a list of test appointments in a table format with an option to copy the test ID to the clipboard. If no appointments are available, it provides a message indicating so.




bookappointment.html
1. **Styles**: Custom styles are applied to make the form and its elements visually appealing and user-friendly.

2. **Form**: 
   - **Personal Information**: Fields for user's name, date of birth, gender, hospital name, contact number, email, address, and patient username are displayed.
   - **Tests Information**: Checkboxes for various medical tests are displayed. Each checkbox represents a specific medical test.
   - **Sample Collection Information**: Fields for sample collection date, sample collection time, specimen type, and result required date are displayed.
   - **Payment and Status Information**: A dropdown for selecting the payment method is displayed.
   - **Hidden Field**: A hidden field for setting the appointment status to "Not Started" is included.

3. **Conditional Rendering**: 
   - Each checkbox's `checked` attribute is conditionally rendered based on whether the test is selected or not. This is done using Django's template syntax.

4. **JavaScript**: 
   - The JavaScript code includes an event listener for the "Copy to Clipboard" button to copy the test ID to the clipboard when clicked.

5. **CSRF Token**: 
   - A CSRF token is included in the form to prevent Cross-Site Request Forgery attacks.

6. **Submit Button**: 
   - A submit button is provided at the end of the form to allow users to submit their appointment booking details.

7. **Libraries**: 
   - External libraries like jQuery and Bootstrap are included for enhanced functionality and styling.

In summary, this code is for a Django template that displays a form for booking medical test appointments. The form includes fields for personal information, test selections, sample collection details, payment method, and appointment status. The form is styled using custom and Bootstrap styles, and JavaScript is used for additional functionality.




login.html
The code you've provided is a Django template for a login page. Here's a brief description of what's happening in the code:

1. **Template Extension**: 
   - The template extends a base HTML template named 'base.html'. This means that the content from this template will be inserted into the `{% block content %}` of the base template.

2. **Login Form**:
   - A Bootstrap-styled login form is displayed inside a Bootstrap card.
   - The form's action is set to the 'login' URL which will handle the login request.
   - CSRF token is included to prevent Cross-Site Request Forgery attacks.
   - Fields for entering username and password are provided with placeholders and are marked as required.
   - A login button is provided to submit the form.

3. **Links**:
   - A link to the registration page is provided for users who don't have an account.
   - A link to the admin login page is provided for administrative access.

4. **Error Messages**:
   - If there are any messages (like authentication errors), they are displayed as danger alerts at the bottom of the card.

Here's a breakdown of the structure:
- **Container**: A container to center the login form on the page.
- **Card**: A Bootstrap card to style the login form.
  - **Card Header**: Displays the title "Login".
  - **Card Body**: Contains the login form.
    - **Form**: Username and password input fields with a login button.
    - **Links**: Links for registration and admin login.
  - **Card Footer**: Displays any error messages using danger alerts.

Overall, this template provides a clean and user-friendly login interface styled with Bootstrap. The form collects username and password for user authentication, and upon submission, the data is sent to the 'login' URL for processing. Any error messages from the authentication process are displayed at the bottom of the card.




register.html
The code you've provided is a Django template for a registration page. Here's a brief description of what's happening in the code:

1. **Template Extension**: 
   - Similar to the previous template, this template extends a base HTML template named 'base.html'.

2. **Registration Form**:
   - A Bootstrap-styled registration form is displayed inside a Bootstrap card.
   - The form's action is set to the 'register' URL which will handle the registration request.
   - CSRF token is included to prevent Cross-Site Request Forgery attacks.
   - Fields for entering first name, last name, username, email, password, and password confirmation are provided.
   - All input fields are marked as required.
   - A registration button is provided to submit the form.

3. **Links**:
   - A link to the login page is provided for users who already have an account.

4. **Error Messages**:
   - If there are any messages (like validation errors or user already exists), they are displayed as danger alerts at the top of the card.

Here's a breakdown of the structure:
- **Container**: A container to center the registration form on the page.
- **Card**: A Bootstrap card to style the registration form.
  - **Card Header**: Displays the title "Register".
  - **Card Body**: Contains the registration form and error messages.
    - **Form**: Fields for first name, last name, username, email, password, and password confirmation with a registration button.
    - **Links**: Link to the login page.
  - **Card Footer**: This template doesn't have a card footer.
  
Overall, this template provides a clean and user-friendly registration interface styled with Bootstrap. The form collects user details for registration, and upon submission, the data is sent to the 'register' URL for processing. Any validation errors or other messages from the registration process are displayed at the top of the card.





viewstatus.html
This Django template is designed to display a form where users can check the status of a test by entering its ID. Let's break down the template's structure and functionality:

1. **Template Extension and Static Files**:
   - The template extends 'base.html' and loads static files.

2. **Form for Checking Test Status**:
   - A Bootstrap-styled form is displayed inside a card with a shadow.
   - The form's method is set to POST and has CSRF token protection.
   - There's a field for entering the Test ID.
   - A "Check Status" button is provided to submit the form.

3. **Conditional Display of Test Status**:
   - If the `status` variable is present (likely passed from the view), a section displaying the test status is shown.
   - This section includes the Test ID and its corresponding status.
   - A status icon (a check mark) is displayed to indicate the test status.

4. **JavaScript**:
   - An extra JavaScript block is included at the end of the template.
   - It contains code to add an animation (`animate__bounceIn` from animate.css) to the status icon when the page loads.

5. **CSS**:
   - An extra CSS block is included at the end of the template.
   - It defines custom styles:
     - `greenish-bg`: Sets a greenish background for the card.
     - `bgdiv`: Sets a background image for the entire container.

Here's a breakdown of the structure:
- **Container**: A container with a background image for styling.
- **Card**: A card to style the form and the test status display.
  - **Card Header**: Displays the title "Check Test Status".
  - **Card Body**: Contains the form for checking test status.
  - **Card Body (Conditional)**: Displays the test status when available.
- **JavaScript**: An animation is added to the status icon for visual effect.
- **CSS**: Custom styles for backgrounds and other elements.

Overall, this template provides a visually appealing and functional interface for users to check the status of a test by entering its ID. The status can be retrieved from a view and passed to this template to display the test's current status along with an animated check mark.
